load_module modules/ngx_http_modsecurity_module.so;

worker_processes auto;
pid /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  # important pour résoudre les noms Docker
  resolver 127.0.0.11;

  # Redirect all HTTP requests on port 80 to HTTPS on port 8080
  server {
    listen 80;
    server_name *.42nice.fr localhost;

    return 301 https://$host:8080$request_uri;
  }

  server {
    listen 8080 ssl;

    server_name *.42nice.fr localhost;

    ssl_certificate     /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    add_header Cross-Origin-Opener-Policy same-origin-allow-popups;
    add_header Cross-Origin-Embedder-Policy require-corp;

	modsecurity off;
	modsecurity_rules_file /etc/modsecurity/main.conf;

    location / {
	  # Proxy for production frontend
      # proxy_pass http://frontend:4173;
      

	  # Proxy for development frontend
      proxy_pass http://frontend:5173;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;

      proxy_redirect off;
      proxy_intercept_errors on;
    }

    location = /index.html {
	  # Proxy for production frontend
      # proxy_pass https://frontend:4173/index.html;

	  # Proxy for development frontend
      proxy_pass https://frontend:5173/index.html;
    }

    location /ws {
      proxy_pass http://pong:4000;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
      proxy_set_header Host $host;
      proxy_read_timeout 60s;
    }

    location /api/ {
      proxy_pass https://backend:3000;
      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # modsecurity off;
    }

    location /nginx_status {
      stub_status;
      # allow all; # à restreindre en prod
    }

    # location = /grafana {
    #   return 301 /grafana/;
    # }

    # location /grafana/ {
    #   proxy_pass http://grafana:3000/;
    #   proxy_set_header Host $host;
    #   proxy_set_header X-Real-IP $remote_addr;
    #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header X-Forwarded-Proto $scheme;
    #   proxy_set_header X-Forwarded-Prefix /grafana;
    # }

    location = /kibana {
      return 301 /kibana/;
    }
    
    location /kibana/ {
      proxy_pass http://kibana:5601/kibana/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }

  server {
    listen 8082;

    location /nginx_status {
      stub_status;
      # allow all;  # à restreindre en prod
    }
  }
}
