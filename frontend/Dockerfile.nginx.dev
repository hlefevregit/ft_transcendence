# Stage 1: Build frontend with Vite
FROM node:20-slim AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# Stage 2: Runtime with Debian + nginx-full + ModSecurity + CRS
FROM debian:bookworm-slim

# Install nginx with ModSecurity and OWASP CRS
RUN apt-get update && apt-get install -y \
    nginx-full \
    libmodsecurity3 \
    libnginx-mod-http-modsecurity \
    git \
    curl && \
    rm -rf /var/lib/apt/lists/*

# Set up ModSecurity base config
RUN mkdir -p /etc/modsecurity && \
    curl -sSL https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/modsecurity.conf-recommended \
        -o /etc/modsecurity/modsecurity.conf && \
    sed -i -E 's/^\s*#?\s*(SecRuleEngine)\s+(DetectionOnly|Off)/\1 On/' /etc/modsecurity/modsecurity.conf && \
    sed -i -E 's/^\s*#?\s*(SecDebugLog)\s+.*/\1 \/dev\/stderr/' /etc/modsecurity/modsecurity.conf && \
    sed -i -E 's/^\s*#?\s*(SecAuditLog)\s+.*/\1 \/dev\/stderr/' /etc/modsecurity/modsecurity.conf && \
    sed -i -E 's/^\s*#?\s*(SecDebugLogLevel)\s+.*/\1 3/' /etc/modsecurity/modsecurity.conf && \
    curl -sSL https://raw.githubusercontent.com/SpiderLabs/ModSecurity/v3/master/unicode.mapping \
        -o /etc/modsecurity/unicode.mapping

# Download OWASP Core Rule Set (CRS) and move it to the expected location
RUN git clone --depth=1 https://github.com/coreruleset/coreruleset /tmp/crs && \
    cp -r /tmp/crs/* /etc/modsecurity/crs && \
    cp /etc/modsecurity/crs/crs-setup.conf.example /etc/modsecurity/crs/crs-setup.conf && \
    rm -rf /tmp/crs

# Write main.conf to include ModSecurity base and CRS
RUN printf '%s\n' \
  'Include /etc/modsecurity/modsecurity.conf' \
  'Include /etc/modsecurity/crs/crs-setup.conf' \
  'Include /etc/modsecurity/crs/rules/*.conf' > /etc/modsecurity/main.conf

# Copy custom Nginx config
COPY nginx.dev.conf /etc/nginx/nginx.conf

# Copy frontend build from previous stage
COPY --from=builder /app/dist /var/www/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
