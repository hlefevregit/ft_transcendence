services:
  vault:
    image: hashicorp/vault:latest
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_SKIP_VERIFY: "true"
      VAULT_ADDR: "https://vault:8200"
      VAULT_API_ADDR: "https://vault:8200"
    volumes:
      - vault_data:/vault/file
      - ./vault/config:/vault/config
      - ./vault/init:/vault/init
      - ./backend/main/certs:/vault/certs:ro
      - ./vault/secrets:/vault/secrets
    networks:
      - vault_network
      - ft_network
    command: vault server -config=/vault/config/vault.hcl

  vault_init:
    image: hashicorp/vault:latest
    depends_on:
      - vault
    volumes:
      - ./vault/init:/vault/init
      - ./vault/secrets:/vault/secrets
      - ./.env:/vault/secrets/.env
    environment:
      VAULT_ADDR: "https://vault:8200"
      VAULT_SKIP_VERIFY: "true"
    networks:
      - ft_network
    entrypoint: sh -c "apk add --no-cache curl bash && bash /vault/init/setup.sh"

  # watcher:
  #   image: alpine
  #   restart: unless-stopped
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   depends_on:
  #     - vault
  #     - vault_init
  #   entrypoint: >
  #     sh -c "
  #       apk add --no-cache docker-cli;
  #       echo 'üëÄ Watching for vault restarts...';
  #       docker events --filter container=ft_transcendence-vault-1 --filter event=die --filter event=stop --filter event=restart |
  #       while read -r event; do
  #         echo 'üîÅ Vault restarted. Restarting vault_init...';
  #         docker restart ft_transcendence-vault_init-1;
  #       done
  #     "

  vault_nginx:
    image: nginx:latest
    depends_on:
      - vault
    ports:
      - "8201:8201"
      - "8200:8200"
    volumes:
      - ./backend/main/certs:/etc/nginx/certs:ro
      - ./vault/config/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - vault_network
    command: nginx -g 'daemon off;'

  backend:
    build:
      context: ${PWD}/backend/main
      dockerfile: Dockerfile.dev
    volumes:
      - backend_data:${PWD}/backend/main
      - ./backend/main/certs:/app/certs:ro
      - sqlite_data:/app/prisma/sqlite
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:./prisma/sqlite/dev.db
      - VAULT_ADDR=https://vault:8200
      - VAULT_SKIP_VERIFY=true
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_SECRET_PATH_GOOGLE=cubbyhole/default/google
      - VAULT_SECRET_PATH_JWT=cubbyhole/default/JWT
    # command: sh -c "npx prisma migrate deploy && npm run dev"
    working_dir: ${PWD}/backend/main
    env_file:
      - ./vault/secrets/.env
    networks:
      - ft_network
    depends_on:
      - vault
      - vault_init

  pong:
    build:
      context: ./backend/pong-service
      dockerfile: Dockerfile.dev
    environment:
      - VAULT_ADDR=https://vault:8200
      - VAULT_SKIP_VERIFY=true
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_SECRET_PATH_JWT=cubbyhole/default

    networks:
      - ft_network
    env_file:
      - ./vault/secrets/.env
    depends_on:
      - vault
      - vault_init

  twofa:
    build:
      context: ./backend/2FA-service
      dockerfile: Dockerfile.dev
    networks:
      - ft_network
    depends_on:
      - vault
      - vault_init
    env_file:
      - ./vault/secrets/.env

  # tournament:
  #   build:
  #     context: ./backend/tournament
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - "4002:4002"
  #   networks:
  #     - ft_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - ./frontend/public:/app/public
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VAULT_ADDR=https://vault:8200
      - VAULT_SKIP_VERIFY=true
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_SECRET_PATH=cubbyhole/default
    depends_on:
      - backend
      - vault
      - vault_init
    env_file:
      - ./vault/secrets/.env
    networks:
      - ft_network

  nginx:
    build:
      context: ./frontend
      dockerfile: Dockerfile.nginx.dev
    ports:
      - "0.0.0.0:8080:8080"  # Changed from "8080:8080" to bind to all interfaces
      - "0.0.0.0:8082:8082"  # Changed from "8082:8082" to bind to all interfaces
    volumes:
      #- ./nginx.dev.conf:/etc/nginx/nginx.conf
      - ./frontend/nginx_conf/certs/:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - backend
      - vault
    networks:
      - ft_network


  #   #---------------------------------------------------------------------------------------
  #   # ---------------- ELK ----------------------------------------------------------------
  #   #---------------------------------------------------------------------------------------


  # elasticsearch:
  #   build:
  #     context: ./elk/elasticsearch
  #     dockerfile: Dockerfile
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - ES_JAVA_OPTS=-Xms1g -Xmx1g
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   volumes:
  #     - es_data:/app/storage
  #     - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
  #   networks:
  #     - ft_network

  # logstash:
  #   build:
  #     context: ./elk/logstash
  #     dockerfile: Dockerfile
  #   container_name: logstash
  #   ports:
  #     - "5044:5044"
  #     - "9600:9600"
  #   environment:
  #     - LS_JAVA_OPTS=-Xms512m -Xmx512m
  #   depends_on:
  #     - elasticsearch
  #   volumes:
  #     - ./logs:/app/logs
  #   networks:
  #     - ft_network

  # filebeat:
  #   build:
  #     context: ./elk/filebeat
  #     dockerfile: Dockerfile
  #   user: root
  #   volumes:
  #     - ./elk/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
  #     - ./logs:/app/logs:ro
  #   depends_on:
  #     - logstash
  #   command: ["--strict.perms=false", "-e"]
  #   networks:
  #     - ft_network


  # kibana:
  #   build:
  #     context: ./elk/kibana
  #     dockerfile: Dockerfile
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - T_PORT_INTERN_LOGGING=9200
  #     - T_ENDPOINT_LOGGING=kibana
  #     - T_SERVER_NAME=localhost
  #     - T_KIBANA_MAXSOCKS=100
  #     - VAULT_ADDR=https://vault:8200
  #     - VAULT_SKIP_VERIFY=true
  #     - VAULT_TOKEN=${VAULT_TOKEN}
  #     - VAULT_SECRET_PATH=cubbyhole/default
  #   depends_on:
  #     - elasticsearch
  #     - vault
  #     - vault_init
  #   networks:
  #     - ft_network

  # # ------------------ ELK END -----------------------------------------------------------
  # #---------------------------------------------------------------------------------------

  # # --------------------------------------------------------------------------------------
  # # ------------------ PROMETHEUS / GRAFANA ----------------------------------------------
  # # --------------------------------------------------------------------------------------

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.retention.time=30d'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.enable-lifecycle'
  #   networks:
  #     - ft_network

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   container_name: cadvisor
  #   ports:
  #     - "8081:8080"
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   networks:
  #     - ft_network

  # grafana:
  #   build:
  #     context: ./monitoring/grafana
  #     dockerfile: Dockerfile.dev
  #   container_name: grafana
  #   environment:
  #     - VAULT_ADDR=https://vault:8200
  #     - VAULT_SKIP_VERIFY=true
  #     - VAULT_TOKEN=${VAULT_TOKEN}
  #     - VAULT_SECRET_PATH=cubbyhole/grafana
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - ft_network
  #   depends_on:
  #     - vault
  #     - vault_init

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:latest
  #   container_name: nginx-exporter
  #   command:
  #     - '-nginx.scrape-uri=http://nginx:8082/nginx_status'
  #   ports:
  #     - "9113:9113"
  #   depends_on:
  #     - nginx
  #   networks:
  #     - ft_network



volumes:
  vault_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/vault/data
      o: bind
  backend_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/backend/main
      o: bind
  frontend_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/frontend
      o: bind
  sqlite_data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/backend/main/prisma/sqlite
      o: bind
  # es_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ${PWD}/elk/elasticsearch/data
  #     o: bind
  # volumes:
  #   elastic_data:
  #     driver: local

  # prometheus_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ${PWD}/monitoring/prometheus/data
  #     o: bind

  # grafana_data:
  #   driver: local
  #   driver_opts:
  #     type: none
  #     device: ${PWD}/monitoring/grafana/data
  #     o: bind

networks:
  ft_network:
    driver: bridge
  vault_network:
