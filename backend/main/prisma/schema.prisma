// 1. Définition du client
generator client {
  provider = "prisma-client-js"
}

// 2. Définition de la base de données SQLite
datasource db {
  provider = "sqlite"
  url      = "file:./prisma/sqlite/dev.db"
}

// 3. Modèles

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  pseudo    String   @unique
  avatarUrl String?
  status    String?
  password  String?
  createdAt DateTime @default(now())

  twoFAEnabled Boolean @default(false)
  twoFASecret String?  // Stocke le secret TOTP de l'utilisateur

  // Friends (relation many-to-many implicite)
  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  // Friend requests
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  // Messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  blockedUsers Block[] @relation("BlockedUsers")
  blockedBy    Block[] @relation("BlockedBy")
}

model FriendRequest {
  id         Int  @id @default(autoincrement())
  fromUser   User @relation("SentRequests", fields: [fromUserId], references: [id])
  fromUserId Int

  toUser   User @relation("ReceivedRequests", fields: [toUserId], references: [id])
  toUserId Int

  status    String   @default("pending") // "pending", "accepted", "declined"
  createdAt DateTime @default(now())
}


model GameResult {
  id           String   @id @default(uuid())
  player1Id    String
  player2Id    String
  winnerId     String
  reason       String
  player1Score Int
  player2Score Int
  createdAt    DateTime @default(now())
}


model Block {
  id         Int      @id @default(autoincrement())
  blocker    User     @relation("BlockedUsers", fields: [blockerId], references: [id])
  blockerId  Int
  blocked    User     @relation("BlockedBy",    fields: [blockedId],  references: [id])
  blockedId  Int
  createdAt  DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Message {
  id         Int      @id @default(autoincrement())
  from       User     @relation("SentMessages",     fields: [fromId], references: [id])
  fromId     Int
  to         User     @relation("ReceivedMessages", fields: [toId],   references: [id])
  toId       Int
  content    String
  createdAt  DateTime @default(now())

  @@index([fromId])
  @@index([toId])
}

model ConversationState {
  readerId     Int
  otherId      Int
  lastReadId   Int      @default(0)
  updatedAt    DateTime @updatedAt

  @@id([readerId, otherId])
  @@index([readerId])
  @@index([otherId])
}

model Invitation {
  inviterId        Int
  inviteeId        Int
  roomId           String?          // rempli quand l’hôte est prêt
  waitingForPlayer Boolean @default(false)

  @@id([inviterId, inviteeId])      // unique par paire
  @@index([inviteeId, waitingForPlayer])
}

